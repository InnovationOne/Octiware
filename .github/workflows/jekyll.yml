name: Build and Deploy Jekyll Site

on:
  push:
    branches:
      - main  # Passen Sie dies ggf. an Ihren Hauptbranch an
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: innovationone/octiware:latest  # Ihr Docker-Image
    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Jekyll-Build ausführen
        run: jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Artefakt hochladen
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Zu GitHub Pages bereitstellen
        id: deployment
        uses: actions/deploy-pages@v4
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

      
# Hinweise zur Verwendung dieses GitHub Actions Workflows:

# 1. Änderungen am Jekyll-Projekt (Inhalte, Layouts, etc.):
#    - Führen Sie 'docker compose up' lokal aus, um Änderungen zu testen.
#    - Committen und pushen Sie die Änderungen zu GitHub.
#    - Dieser Workflow wird automatisch ausgelöst und stellt die Änderungen bereit.

# 2. Änderungen am Docker-Image (z. B. Aktualisierung von Abhängigkeiten):
#    - Bauen Sie das Docker-Image lokal neu:
#      docker build -t innovationone/octiware:latest .
#    - Pushen Sie das aktualisierte Image zu Docker Hub:
#      docker push innovationone/octiware:latest
#    - Stellen Sie sicher, dass dieser Workflow auf das aktualisierte Image verweist.
#    - Committen und pushen Sie die Änderungen zu GitHub, um den Workflow auszulösen.

# Wichtiger Hinweis: Stellen Sie sicher, dass das Docker-Image öffentlich ist,
# damit GitHub Actions darauf zugreifen kann. Bei privaten Images sind zusätzliche
# Authentifizierungsschritte erforderlich.
